{"version":3,"sources":["utilities.tsx","Ip.tsx","Subnet.tsx","App.tsx","calculator.ts","reportWebVitals.ts","index.tsx"],"names":["calcMask","vNetSize","vnetBin","posIndex","bit","currentValue","nextBit","subNetDec","map","bin","parseInt","calcHostCount","Math","pow","pad","padStart","orIpBin","a","b","v","i","split","join","or","binIp2Dec","ip","toString","invert","getNextIp","ipDez","increased","length","ipPart","ipPartDez","Number","newPart","Ip","props","dec","title","decIp","binIp","gutter","span","value","Subnet","subnet","onSizeChange","startIp","lastIp","minSize","size","subnetMask","hostcount","useState","subnetSize","setSubnetSize","useEffect","min","max","onChange","style","fontSize","App","setVNetSize","ipRange","setIpRange","subnetSizes","setSubnetSizes","hostCountVnet","subnets","subNets","nextStartIp","index","subnetBin","subnetDez","invertedSubnet","s","push","calcSubnets","subnetHostCount","reduce","total","sub","className","placeholder","e","target","addonAfter","newSIze","newSizes","onClick","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.35358596.chunk.js","sourcesContent":["export const MIN_NET_SIZE = 1;\r\nexport const MAX_NET_SIZE = 32;\r\n\r\nexport function calcMask(vNetSize: number): [vnetBin: string[], subNetDec: number[]] {\r\n  const vnetBin: string[] = [];\r\n  let posIndex = 0;\r\n  for (let bit = MIN_NET_SIZE; bit <= MAX_NET_SIZE; bit++) {\r\n    let currentValue = vnetBin[posIndex] || \"\";\r\n    const nextBit = bit <= vNetSize ? \"1\" : \"0\";\r\n    vnetBin[posIndex] = currentValue + nextBit;\r\n\r\n    if (bit % 8 === 0) {\r\n      posIndex += 1;\r\n    }\r\n  }\r\n\r\n  const subNetDec = vnetBin.map((bin) => parseInt(bin, 2));\r\n  return [vnetBin, subNetDec];\r\n}\r\nexport function calcHostCount(vNetSize: number) {\r\n  return Math.pow(2, MAX_NET_SIZE - vNetSize);\r\n}\r\nfunction and(a: string, b: string) {\r\n  return a\r\n    .split(\"\")\r\n    .map((v, i) => (v === \"1\" && b[i] === \"1\" ? \"1\" : \"0\"))\r\n    .join(\"\");\r\n}\r\nfunction or(a: string, b: string) {\r\n  return a\r\n    .split(\"\")\r\n    .map((v, i) => (v === \"1\" || b[i] === \"1\" ? \"1\" : \"0\"))\r\n    .join(\"\");\r\n}\r\nexport function pad(bin: string) {\r\n  return bin.padStart(8, \"0\");\r\n}\r\nexport function andIpBin(a: string[], b: string[]) {\r\n  return a.map((v, i) => and(v, b[i]));\r\n}\r\nexport function orIpBin(a: string[], b: string[]) {\r\n  return a.map((v, i) => or(v, b[i]));\r\n}\r\n\r\nexport function binIp2Dec(ip: string[]) {\r\n  return ip.map((bin) => parseInt(bin, 2).toString());\r\n}\r\n\r\nexport function decIp2Bin(ip: string[]) {\r\n  return ip.map((dec) => pad(Number(dec).toString(2)));\r\n}\r\nexport const invert = (v: string) => (v === \"1\" ? \"0\" : \"1\");\r\n\r\nexport function getNextIp(ipDez: string []){\r\n    const increased = [...ipDez];\r\n    \r\n    for (let i = ipDez.length-1; i > 0; i--) {\r\n      const ipPart = ipDez[i];\r\n      const ipPartDez = Number(ipPart);\r\n      if(ipPartDez < 255){\r\n        const newPart =  ipPartDez+1\r\n        increased[i] = `${newPart}`; \r\n        break;\r\n      }else {\r\n        increased[i] = \"0\"\r\n      }\r\n    }\r\n    return increased\r\n}\r\n\r\n\r\nexport function calcSubnetCount(subnetBin: string[], vnetBin:string[]) {\r\n  let subNetBits = 0;\r\n  for (let index = 0; index < MAX_NET_SIZE - 1; index++) {\r\n      const sub = subnetBin.join(\"\")[index];\r\n      const vnet = vnetBin.join(\"\")[index];\r\n      if (sub === \"1\" && vnet === \"0\") {\r\n          subNetBits += 1;\r\n      }\r\n  }\r\n\r\n  const subnetCount = Math.pow(2, subNetBits);\r\n  return subnetCount;\r\n}","import React from \"react\";\r\nimport { Col, Row, Statistic } from \"antd\";\r\nimport { binIp2Dec, decIp2Bin } from \"./utilities\";\r\n\r\nexport function Ip(props: { title: string; dec?: string[]; bin?: string[]; }) {\r\n  const { dec, bin, title } = props;\r\n  const decIp = dec ? dec : binIp2Dec(bin!);\r\n  const binIp = bin ? bin : decIp2Bin(dec!);\r\n\r\n  return (\r\n    <Row gutter={20}>\r\n      <Col span={12}>\r\n        <Statistic title={title + \" (dec)\"} value={decIp.join(\".\")} />\r\n      </Col>\r\n      <Col span={12}>\r\n        <Statistic title={title + \" (bin)\"} value={binIp.join(\".\")} />\r\n      </Col>\r\n    </Row>\r\n  );\r\n}\r\n","import { useEffect, useState } from \"react\";\r\nimport { Card, Col, Row, Slider, Statistic } from \"antd\";\r\nimport { Ip } from \"./Ip\";\r\nimport { MAX_NET_SIZE } from \"./utilities\";\r\nimport { ISubnet } from \"./calculator\";\r\n\r\nexport interface SubnetProps {\r\n  subnet: ISubnet;\r\n  onSizeChange: (newSize: number) => void;\r\n}\r\n\r\nexport function Subnet(props: SubnetProps) {\r\n  const { subnet, onSizeChange } = props;\r\n  const { startIp, lastIp, minSize, size, subnetMask, hostcount } = subnet;\r\n\r\n  const [subnetSize, setSubnetSize] = useState(size);\r\n\r\n  useEffect(() => {\r\n    onSizeChange(subnetSize);\r\n  }, [subnetSize]);\r\n\r\n  return (\r\n    <Card title=\"Sub-Net\">\r\n        <Row gutter={20}>\r\n        <Col span={12}>\r\n          <Statistic title={\"Subnet\" } value={startIp+\"/\"+subnetSize} />\r\n        </Col>\r\n      </Row>\r\n      <Row>\r\n        <Col span={9}>\r\n          <Slider\r\n            min={minSize}\r\n            max={MAX_NET_SIZE}\r\n            onChange={setSubnetSize}\r\n            value={subnetSize}\r\n          />\r\n        </Col>\r\n\r\n        <Col span={3}>\r\n          <div style={{ fontSize: 20 }}>{subnetSize}</div>\r\n        </Col>\r\n      </Row>\r\n\r\n      <Ip title=\"Subnet\" dec={subnetMask.split(\".\")}></Ip>\r\n\r\n      <Row>\r\n        <Col span={12}>\r\n          <Statistic\r\n            title=\"Subnet Host Count (minus Networkaddress and broadcast)\"\r\n            value={`${hostcount} - 2 = ${hostcount - 2} `}\r\n          />\r\n        </Col>\r\n      </Row>\r\n\r\n      <Ip dec={lastIp.split(\".\")} title=\"Last Subnet IP\" />\r\n    </Card>\r\n  );\r\n}\r\n","import React, { useEffect, useState } from \"react\";\r\nimport logo from \"./logo.svg\";\r\nimport { Button, Card, Col, Input, Row, Slider, Statistic } from \"antd\";\r\nimport \"./App.less\";\r\nimport { Ip } from \"./Ip\";\r\nimport {\r\n  calcMask,\r\n  calcHostCount,\r\n  MAX_NET_SIZE,\r\n  MIN_NET_SIZE,\r\n} from \"./utilities\";\r\nimport { Subnet } from \"./Subnet\";\r\nimport { calcSubnets } from \"./calculator\";\r\n\r\nfunction App() {\r\n  const [vNetSize, setVNetSize] = useState(16);\r\n\r\n  const [ipRange, setIpRange] = useState(\"192.168.0.0\");\r\n\r\n  const [vnetBin] = calcMask(vNetSize);\r\n  const [subnetSizes, setSubnetSizes] = useState([vNetSize]);\r\n  const hostCountVnet = calcHostCount(vNetSize);\r\n\r\n \r\n\r\n  const subnets = calcSubnets(ipRange,vNetSize,subnetSizes);\r\n  const subnetHostCount = subnets.reduce((total,sub)=>total+sub.hostcount,0)\r\n\r\n  return (\r\n    <div className=\"site-card-border-less-wrapper\">\r\n      <Card title=\"V-Net\">\r\n        <Row>\r\n          <Col span={12}>\r\n            <Slider\r\n              min={MIN_NET_SIZE}\r\n              max={MAX_NET_SIZE}\r\n              onChange={setVNetSize}\r\n              value={vNetSize}\r\n            />\r\n          </Col>\r\n        </Row>\r\n        <Row gutter={20}>\r\n          <Col span={12}>\r\n            <Input\r\n              placeholder=\"IP Range\"\r\n              value={ipRange}\r\n              onChange={(e) => setIpRange(e.target.value)}\r\n              addonAfter={\"/\" + vNetSize}\r\n            />\r\n          </Col>\r\n        </Row>\r\n        <Ip title=\"Ip Range\" dec={ipRange.split(\".\")} />\r\n        <Ip title=\"vnet\" bin={vnetBin} />\r\n\r\n        <Row>\r\n          <Col span={12}>\r\n            <Statistic\r\n              title=\"Host Count (minus Networkaddress and broadcast)\"\r\n              value={`${hostCountVnet} - 2 = ${hostCountVnet - 2} `}\r\n            />\r\n          </Col>\r\n        </Row>\r\n        <Row>\r\n          <Col span={12}>\r\n            <Statistic\r\n              title=\"Host Count of all Subnets\"\r\n              value={`${subnetHostCount}`}\r\n            />\r\n          </Col>\r\n        </Row>\r\n      </Card>\r\n      {subnets.map((subnet, index) => (\r\n        <Subnet\r\n          key={index}\r\n          subnet={subnet}\r\n          onSizeChange={(newSIze) => {\r\n              const newSizes = [...subnetSizes];\r\n              newSizes[index] =newSIze\r\n              setSubnetSizes(newSizes);\r\n            }\r\n          }\r\n        />\r\n      ))}\r\n      <Button\r\n        onClick={() => {\r\n          setSubnetSizes([...subnetSizes, subnets[subnets.length-1].size]); \r\n        }}\r\n      >\r\n        Add Subnet\r\n      </Button>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import { binIp2Dec, calcHostCount, calcMask, getNextIp, invert, orIpBin, pad } from \"./utilities\";\r\n\r\nexport interface ISubnet {\r\n    startIp: string,\r\n    lastIp: string,\r\n    minSize:number,\r\n    size: number,\r\n    subnetMask: string,\r\n    hostcount: number\r\n}\r\n\r\nexport function calcSubnets(ipRange:string, vNetSize: number, subnetSizes:number[]): Array<ISubnet>{\r\n\r\n    const subNets = []\r\n    let nextStartIp = ipRange.split(\".\");\r\n    let nextMinSize = vNetSize;\r\n    for (let index = 0; index < subnetSizes.length; index++) {\r\n        const subnetSize = subnetSizes[index];\r\n\r\n\r\n        const [subnetBin, subnetDez] = calcMask(subnetSize);\r\n        const invertedSubnet = subnetBin.map((s) => s.split(\"\").map(invert).join(\"\"));\r\n        const ipRangeBin = nextStartIp.map((dec) => pad(Number(dec).toString(2)));\r\n        const lastSubnetIpBin = orIpBin(ipRangeBin, invertedSubnet);\r\n        const lastIp = binIp2Dec(lastSubnetIpBin);\r\n        const hostcount = calcHostCount(subnetSize);\r\n\r\n        subNets.push({\r\n            startIp: nextStartIp.join(\".\"),\r\n            lastIp: lastIp.join(\".\"),\r\n            minSize:vNetSize,\r\n            size: subnetSize,\r\n            subnetMask: subnetDez.join(\".\"),\r\n            hostcount\r\n        })\r\n        \r\n        nextMinSize= subnetSize\r\n        nextStartIp = getNextIp(lastIp)\r\n    }\r\n\r\n\r\n    return subNets\r\n\r\n}","import { ReportHandler } from 'web-vitals';\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\nimport reportWebVitals from \"./reportWebVitals\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}