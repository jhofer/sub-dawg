{"version":3,"sources":["utilities.tsx","Ip.tsx","Subnet.tsx","App.tsx","calculator.ts","reportWebVitals.ts","index.tsx"],"names":["calcMask","vNetSize","vnetBin","posIndex","bit","currentValue","nextBit","subNetDec","map","bin","parseInt","calcHostCount","Math","pow","pad","padStart","orIpBin","a","b","v","i","split","join","or","binIp2Dec","ip","toString","invert","getNextIp","ipDez","increased","length","ipPart","ipPartDez","Number","newPart","Ip","props","dec","title","decIp","binIp","gutter","span","value","Subnet","subnet","onChange","onSizeChange","onDelete","startIp","lastIp","minSize","size","subnetMask","hostcount","name","useState","subnetSize","setSubnetSize","subnetName","setName","useEffect","style","margin","e","currentTarget","onClick","min","max","fontSize","App","setVNetSize","ipRange","setIpRange","subnetSizes","setSubnetSizes","hostCountVnet","subnets","subNets","nextStartIp","index","subnetBin","subnetDez","invertedSubnet","s","push","calcSubnets","subnetHostCount","reduce","total","sub","className","placeholder","target","addonAfter","newSizes","splice","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.7e37c3ff.chunk.js","sourcesContent":["export const MIN_NET_SIZE = 1;\r\nexport const MAX_NET_SIZE = 32;\r\n\r\nexport function calcMask(vNetSize: number): [vnetBin: string[], subNetDec: number[]] {\r\n  const vnetBin: string[] = [];\r\n  let posIndex = 0;\r\n  for (let bit = MIN_NET_SIZE; bit <= MAX_NET_SIZE; bit++) {\r\n    let currentValue = vnetBin[posIndex] || \"\";\r\n    const nextBit = bit <= vNetSize ? \"1\" : \"0\";\r\n    vnetBin[posIndex] = currentValue + nextBit;\r\n\r\n    if (bit % 8 === 0) {\r\n      posIndex += 1;\r\n    }\r\n  }\r\n\r\n  const subNetDec = vnetBin.map((bin) => parseInt(bin, 2));\r\n  return [vnetBin, subNetDec];\r\n}\r\nexport function calcHostCount(vNetSize: number) {\r\n  return Math.pow(2, MAX_NET_SIZE - vNetSize);\r\n}\r\nfunction and(a: string, b: string) {\r\n  return a\r\n    .split(\"\")\r\n    .map((v, i) => (v === \"1\" && b[i] === \"1\" ? \"1\" : \"0\"))\r\n    .join(\"\");\r\n}\r\nfunction or(a: string, b: string) {\r\n  return a\r\n    .split(\"\")\r\n    .map((v, i) => (v === \"1\" || b[i] === \"1\" ? \"1\" : \"0\"))\r\n    .join(\"\");\r\n}\r\nexport function pad(bin: string) {\r\n  return bin.padStart(8, \"0\");\r\n}\r\nexport function andIpBin(a: string[], b: string[]) {\r\n  return a.map((v, i) => and(v, b[i]));\r\n}\r\nexport function orIpBin(a: string[], b: string[]) {\r\n  return a.map((v, i) => or(v, b[i]));\r\n}\r\n\r\nexport function binIp2Dec(ip: string[]) {\r\n  return ip.map((bin) => parseInt(bin, 2).toString());\r\n}\r\n\r\nexport function decIp2Bin(ip: string[]) {\r\n  return ip.map((dec) => pad(Number(dec).toString(2)));\r\n}\r\nexport const invert = (v: string) => (v === \"1\" ? \"0\" : \"1\");\r\n\r\nexport function getNextIp(ipDez: string []){\r\n    const increased = [...ipDez];\r\n    \r\n    for (let i = ipDez.length-1; i > 0; i--) {\r\n      const ipPart = ipDez[i];\r\n      const ipPartDez = Number(ipPart);\r\n      if(ipPartDez < 255){\r\n        const newPart =  ipPartDez+1\r\n        increased[i] = `${newPart}`; \r\n        break;\r\n      }else {\r\n        increased[i] = \"0\"\r\n      }\r\n    }\r\n    return increased\r\n}\r\n\r\n\r\nexport function calcSubnetCount(subnetBin: string[], vnetBin:string[]) {\r\n  let subNetBits = 0;\r\n  for (let index = 0; index < MAX_NET_SIZE - 1; index++) {\r\n      const sub = subnetBin.join(\"\")[index];\r\n      const vnet = vnetBin.join(\"\")[index];\r\n      if (sub === \"1\" && vnet === \"0\") {\r\n          subNetBits += 1;\r\n      }\r\n  }\r\n\r\n  const subnetCount = Math.pow(2, subNetBits);\r\n  return subnetCount;\r\n}","import React from \"react\";\r\nimport { Col, Row, Statistic } from \"antd\";\r\nimport { binIp2Dec, decIp2Bin } from \"./utilities\";\r\n\r\nexport function Ip(props: { title: string; dec?: string[]; bin?: string[]; }) {\r\n  const { dec, bin, title } = props;\r\n  const decIp = dec ? dec : binIp2Dec(bin!);\r\n  const binIp = bin ? bin : decIp2Bin(dec!);\r\n\r\n  return (\r\n    <Row gutter={20}>\r\n      <Col span={12}>\r\n        <Statistic title={title + \" (dec)\"} value={decIp.join(\".\")} />\r\n      </Col>\r\n      <Col span={12}>\r\n        <Statistic title={title + \" (bin)\"} value={binIp.join(\".\")} />\r\n      </Col>\r\n    </Row>\r\n  );\r\n}\r\n","import { useEffect, useState } from \"react\";\r\nimport { Button, Card, Col, Input, Row, Slider, Statistic } from \"antd\";\r\nimport { Ip } from \"./Ip\";\r\nimport { MAX_NET_SIZE } from \"./utilities\";\r\nimport { ISubnet } from \"./calculator\";\r\n\r\nexport interface SubnetProps {\r\n  subnet: ISubnet;\r\n  onSizeChange: (subnet: {subnetSize: number, subnetName: string}) => void;\r\n  onDelete: () => void;\r\n}\r\n\r\nexport function Subnet(props: SubnetProps) {\r\n  const { subnet, onSizeChange: onChange, onDelete } = props;\r\n  const { startIp, lastIp, minSize, size, subnetMask, hostcount, name } = subnet;\r\n\r\n  const [subnetSize, setSubnetSize] = useState(size);\r\n  const [subnetName, setName] = useState(name);\r\n\r\n  useEffect(() => {\r\n    onChange({subnetSize,subnetName});\r\n  }, [subnetSize, subnetName]);\r\n\r\n  return (\r\n    <Card style={{margin:20}} title={<Input value={name} onChange={(e)=>{\r\n      setName(e.currentTarget.value)\r\n    }}/>}>\r\n      <Row gutter={20}>\r\n        <Col span={12}>\r\n          <Statistic title={\"Subnet\"} value={startIp + \"/\" + subnetSize} />\r\n        </Col>\r\n        <Col>\r\n        <Button onClick={onDelete}>Delete</Button>\r\n        </Col>\r\n      </Row>\r\n      \r\n      <Row>\r\n        <Col span={9}>\r\n          <Slider\r\n            min={minSize}\r\n            max={MAX_NET_SIZE}\r\n            onChange={setSubnetSize}\r\n            value={subnetSize}\r\n          />\r\n        </Col>\r\n\r\n        <Col span={3}>\r\n          <div style={{ fontSize: 20 }}>{subnetSize}</div>\r\n        </Col>\r\n      </Row>\r\n\r\n      <Ip title=\"Subnet\" dec={subnetMask.split(\".\")}></Ip>\r\n\r\n      <Row>\r\n        <Col span={12}>\r\n          <Statistic\r\n            title=\"Subnet Host Count (minus Networkaddress and broadcast)\"\r\n            value={`${hostcount} - 2 = ${hostcount - 2} `}\r\n          />\r\n        </Col>\r\n      </Row>\r\n\r\n      <Ip dec={lastIp.split(\".\")} title=\"Last Subnet IP\" />\r\n    </Card>\r\n  );\r\n}\r\n","import React, { useEffect, useState } from \"react\";\r\nimport logo from \"./logo.svg\";\r\nimport { Button, Card, Col, Input, Row, Slider, Statistic } from \"antd\";\r\nimport \"./App.less\";\r\nimport { Ip } from \"./Ip\";\r\nimport {\r\n  calcMask,\r\n  calcHostCount,\r\n  MAX_NET_SIZE,\r\n  MIN_NET_SIZE,\r\n} from \"./utilities\";\r\nimport { Subnet } from \"./Subnet\";\r\nimport { calcSubnets } from \"./calculator\";\r\n\r\nfunction App() {\r\n  const [vNetSize, setVNetSize] = useState(16);\r\n\r\n  const [ipRange, setIpRange] = useState(\"192.168.0.0\");\r\n\r\n  const [vnetBin] = calcMask(vNetSize);\r\n  const [subnetSizes, setSubnetSizes] = useState([\r\n    { size: vNetSize, name: \"snet-default\" },\r\n  ]);\r\n  const hostCountVnet = calcHostCount(vNetSize);\r\n\r\n  const subnets = calcSubnets(ipRange, vNetSize, subnetSizes);\r\n  const subnetHostCount = subnets.reduce(\r\n    (total, sub) => total + sub.hostcount,\r\n    0\r\n  );\r\n\r\n  return (\r\n    <div className=\"site\">\r\n      <Card title=\"V-Net\" style={{margin:20}}>\r\n        <Row>\r\n          <Col span={12}>\r\n            <Slider\r\n              min={MIN_NET_SIZE}\r\n              max={MAX_NET_SIZE}\r\n              onChange={setVNetSize}\r\n              value={vNetSize}\r\n            />\r\n          </Col>\r\n        </Row>\r\n        <Row gutter={20}>\r\n          <Col span={12}>\r\n            <Input\r\n              placeholder=\"IP Range\"\r\n              value={ipRange}\r\n              onChange={(e) => setIpRange(e.target.value)}\r\n              addonAfter={\"/\" + vNetSize}\r\n            />\r\n          </Col>\r\n        </Row>\r\n        <Ip title=\"Ip Range\" dec={ipRange.split(\".\")} />\r\n        <Ip title=\"vnet\" bin={vnetBin} />\r\n\r\n        <Row>\r\n          <Col span={12}>\r\n            <Statistic\r\n              title=\"Host Count (minus Networkaddress and broadcast)\"\r\n              value={`${hostCountVnet} - 2 = ${hostCountVnet - 2} `}\r\n            />\r\n          </Col>\r\n        </Row>\r\n        <Row>\r\n          <Col span={12}>\r\n            <Statistic\r\n              title=\"Host Count of all Subnets\"\r\n              value={`${subnetHostCount}`}\r\n            />\r\n          </Col>\r\n        </Row>\r\n      </Card>\r\n      {subnets.map((subnet, index) => (\r\n        <Subnet\r\n          key={index}\r\n          subnet={subnet}\r\n          onSizeChange={({ subnetSize, subnetName }) => {\r\n            const newSizes = [...subnetSizes];\r\n            newSizes[index] = { size: subnetSize, name: subnetName };\r\n            setSubnetSizes(newSizes);\r\n          }}\r\n          onDelete={() => {\r\n            const newSizes = [...subnetSizes];\r\n            newSizes.splice(index, 1);\r\n            setSubnetSizes(newSizes);\r\n          }}\r\n        />\r\n      ))}\r\n      <Button\r\n        onClick={() => {\r\n          setSubnetSizes([\r\n            ...subnetSizes,\r\n            {\r\n              size: subnets[subnets.length - 1].size,\r\n              name: \"snet-default-\" + subnets.length,\r\n            },\r\n          ]);\r\n        }}\r\n      >\r\n        Add Subnet\r\n      </Button>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import { binIp2Dec, calcHostCount, calcMask, getNextIp, invert, orIpBin, pad } from \"./utilities\";\r\n\r\nexport interface ISubnetDef {\r\n    size: number,\r\n    name: string\r\n}\r\n\r\nexport interface ISubnet extends ISubnetDef {\r\n    startIp: string,\r\n    lastIp: string,\r\n    minSize:number,\r\n    subnetMask: string,\r\n    hostcount: number\r\n}\r\n\r\nexport function calcSubnets(ipRange:string, vNetSize: number, subnetSizes:Array<ISubnetDef>): Array<ISubnet>{\r\n\r\n    const subNets = []\r\n    let nextStartIp = ipRange.split(\".\");\r\n    for (let index = 0; index < subnetSizes.length; index++) {\r\n        const {size, name} = subnetSizes[index];\r\n\r\n        const [subnetBin, subnetDez] = calcMask(size);\r\n        const invertedSubnet = subnetBin.map((s) => s.split(\"\").map(invert).join(\"\"));\r\n        const ipRangeBin = nextStartIp.map((dec) => pad(Number(dec).toString(2)));\r\n        const lastSubnetIpBin = orIpBin(ipRangeBin, invertedSubnet);\r\n        const lastIp = binIp2Dec(lastSubnetIpBin);\r\n        const hostcount = calcHostCount(size);\r\n\r\n        subNets.push({\r\n            startIp: nextStartIp.join(\".\"),\r\n            lastIp: lastIp.join(\".\"),\r\n            minSize:vNetSize,\r\n            size,\r\n            name,\r\n            subnetMask: subnetDez.join(\".\"),\r\n            hostcount\r\n        })\r\n        \r\n       \r\n        nextStartIp = getNextIp(lastIp)\r\n    }\r\n\r\n\r\n    return subNets\r\n\r\n}","import { ReportHandler } from 'web-vitals';\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\nimport reportWebVitals from \"./reportWebVitals\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}